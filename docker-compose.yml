version: "3.8"
services:
  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_PORT=${TYPEORM_PORT}
      - POSTGRES_USER=${TYPEORM_USERNAME}
      - POSTGRES_PASSWORD=${TYPEORM_PASSWORD}
      - POSTGRES_DATABASE=${TYPEORM_DATABASE}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: ${RESTART_POLICY}
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - TZ=Europe/Moscow
      - RABBITMQ_DEFAULT_VHOST=${RABBIT_VIRTUAL_HOST}
      - RABBITMQ_DEFAULT_USER=${RABBIT_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 12s
      retries: 5
      start_period: 2s
    volumes:
      - ./rabbit_data:/var/lib/rabbitmq
    restart: ${RESTART_POLICY}
  markov:
    image: node:16
    container_name: markov
    ports:
      - ${PORT}:${PORT}
    environment:
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - TZ=Europe/Moscow
    volumes:
      - ./services:/home/service
    command:
      - /bin/bash
      - -c
      - |
        cd /home/service
        npm run typeorm:cli -- migration:run
        npm run start:markov:${START_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: ${RESTART_POLICY}
  parser:
    image: node:16
    container_name: parser
    environment:
      - NODE_ENV=${NODE_ENV}
      - TZ=Europe/Moscow
    volumes:
      - ./services:/home/service
    command:
      - /bin/bash
      - -c
      - |
        cd /home/service
        npm run start:parser:${START_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: ${RESTART_POLICY}

